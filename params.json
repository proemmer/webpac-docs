{
  "name": "Webpac-documents",
  "tagline": "documentation of webpac",
  "body": "# webpac-docs\r\n(web based plc data access)\r\n\r\nBy [Benjamin Proemmer](https://github.com/proemmer)\r\n\r\nWebpac is a software which offers an web-interface for accessing Step7 PLC's. \r\nThis interface enables you to read and write to/from PLC.\r\nFurthermore it supports the functionality to subscribe for events if data changes.\r\n\r\n![System Overview](./images/System.PNG)\r\n\r\n\r\n## running the application\r\n\r\nTo start webpac, you have to run the following command:\r\n\r\n![start webpac](./images/start.PNG)\r\n\r\nafter this the application runs in the command window:\r\n\r\n![running webpac](./images/Running.PNG)\r\n\r\n## Absolute (address based access)\r\n\r\nThe first method to read and write data is by its absolute address.\r\nTo address a value in the PLC you have to specify the area and the type.\r\n\r\n### Area\r\n| Area | Name  |\r\n| ---------| --------------- |\r\n| DB[Number] | datablock |\r\n| FB | Flags |\r\n| IB | Input |\r\n| OB | Output |\r\n| TB | Timer |\r\n| CB | Counter |\r\n\r\n### Address\r\n\r\n[Code][Offset][_Length]\r\n\r\n| Code | Type  |\r\n| ---------| --------------- |\r\n| BIT | Boolean |\r\n| B   | Byte |\r\n| BYTE| Byte |\r\n| C   | Char |\r\n| CHAR| Char |\r\n| DATE | Date |\r\n| DT | DateTime |\r\n| DATETIME | DateTime |\r\n| DI | Double Integer |\r\n| DINT | Double Integer |\r\n| I | Integer |\r\n| INT | Integer |\r\n| R | Real |\r\n| REAL | Real |\r\n| TIMEBCD | S7 Time |\r\n| S | String |\r\n| STRING | String |\r\n| T | Time |\r\n| TIME | Time |\r\n| TOD | TimeOf Day |\r\n| W | Word |\r\n| WORD | Word |\r\n| CT | Counter |\r\n| COUNT | Counter |\r\n\r\n\r\n\r\n\r\n## Symbolic (symbol based access)\r\n\r\nThe second access method is by its symbolic name. For this, you have to create a \r\ndata-mapping file. The structure of this file is an C# class with properties. \r\nTo create such a file is very easy, you could use a tool from \r\n[insite-gmbh](http://www.insite-gmbh.de) called AWLConverter. \r\nThis tool extracts the data from the Simatic Manager and converts it \r\nto the representation we use. \r\n\r\n![System Overview](./images/ToolChain.PNG)\r\n\r\n##web api\r\n\r\nTo visualize and test the web api we added swagger support.\r\n\r\n![System Overview](./images/Swagger.PNG)\r\n\r\n\r\n##Configuration\r\n\r\nThe configuration file named 'appsettings.json' has the configuration settings for Logging, Plc, RuntimeCompiler and the Authentication.\r\n\r\n### Logging\r\n\r\n```c#\r\n  \"Logging\": {\r\n    \"IncludeScopes\": false,\r\n    \"LogLevel\": {\r\n      \"Default\": \"Information\",\r\n      \"System\": \"Information\",\r\n      \"Microsoft\": \"Information\"\r\n    }\r\n  }\r\n```\r\n\r\n### Plc\r\n\r\nThis section specifies the connection parameter to the PLC.\r\n\r\n```c#\r\n  \"Plc\": {\r\n    \"ConnectionString\": \"Data Source=127.0.0.1:102,0,2\",\r\n    \"ConnectOnStartup\": true,\r\n    \"ReconnectOnConnectionLost\": true,\r\n    \"ReconnectIntervall\":  5000\r\n  }\r\n```\r\n\r\n*   *ConnectionString*: Defines the address to the PLC. Syntax: [IP]:[PORT],[RACK],[SLOT]\r\n*   *ConnectOnStartup*: If this value is *true*, webpac try connecting to PLC at the application start.\r\n*   *ReconnectOnConnectionLost*: If this value is *true*, webpac tries to reconnect, when PLC connection goes down.\r\n*   *ConnectReconnectIntervallOnStartup*: This value specifies the connection retry interval.\r\n\r\n### RuntimeCompiler\r\n\r\n```c#\r\n  \"RuntimeCompiler\": {\r\n    \"Location\": \"C:\\\\webpac\\\\data\",\r\n    \"Usings\": [\r\n      \"System\",\r\n      \"Papper.Attributes\"\r\n    ]\r\n  }\r\n```\r\n*   *Location*: This value specifies the Location of the symbolic file (C# class files).\r\n*   *Usings*: This is an array of usings depending of the class files you want compile.\r\n\r\n\r\n### Authentication\r\n\r\n```c#\r\n  \"Auth\": {\r\n    \"KeyFile\": \"C:\\\\webpac\\\\data\\\\sec.key\",\r\n    \"TokenValidatenTimeinMinutes\": 1440 ,\r\n    \"Users\": [\r\n      {\r\n        \"Type\": \"ReadOnly\",\r\n        \"Username\": \"ReadOnlyUsername\",\r\n        \"Password\": \"ReadOnlyPassword\"\r\n      },\r\n      {\r\n        \"Type\": \"ReadWrite\",\r\n        \"Username\": \"ReadWriteUsername\",\r\n        \"Password\": \"ReadWritePassword\"\r\n      }\r\n    ]\r\n  }\r\n```\r\n\r\n*   *KeyFile*: This value specifies the Location of the key file for the authentication token (this file will be created on first start).\r\n*   *TokenValidatenTimeinMinutes*: This value specifies the validation time of the token.\r\n*   *Users.Type*: Select the access level for the api calls [Valid parameters are ReadOnly, ReadWrite]\r\n*   *Users.Username*: Name of the user for sign in.\r\n*   *Users.Password*: Password for the specified user.\r\n\r\n\r\n\r\n##Used Libraries\r\n\r\nTo get the PLC access we use two libraries as the following image describe.\r\n\r\n![Library communication](./images/webpactoplc.PNG)\r\n\r\n###Papper\r\n\r\n[Papper](http://proemmer.github.io/papper) is a data mapper which maps a C# class to a PLC data block.\r\nThis package is also available as a [nuget](https://www.nuget.org/packages/Papper/) package.\r\n\r\n\r\n### Dacs7\r\n\r\n[DacS7](http://proemmer.github.io/dacs7/) is a low level component which handles the communication to the \r\nPLC and is available as a [nuget](https://www.nuget.org/packages/Dacs7/) package.\r\n\r\n\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}